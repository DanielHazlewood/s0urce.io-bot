/*
 * This is a JavaScript Scratchpad.
 *
 * Enter some JavaScript, then Right Click or choose from the Execute Menu:
 * 1. Run to evaluate the selected text (Ctrl+R),
 * 2. Inspect to bring up an Object Inspector on the result (Ctrl+I), or,
 * 3. Display to insert the result in a comment after the selection. (Ctrl+L)
 */
let config, userVars
config = {
  activeBot: false,
  typeWindowName: "window-tool",
  toolTypeName: "tool-type",
  areaToTypeIn: "tool-type-word",
  toolTypeForm: "tool-type-form",
  easyDict: ["bit", "net", "intel", "load", "xml", "join", "get", "emit", "ghost", "call", "handle", "part", "loop", "pass", "global", "data", "status", "add", "url", "write", "point", "user", "delete", "client", "port", "file", "right", "system", "list", "reset", "upload", "root", "remove", "event", "dir", "socket", "ping", "com", "size", "init", "send", "cookies", "buffer", "info", "set", "key", "count", "bytes", "num", "left", "poly", "type", "domain", "host", "temp", "log", "stat", "add", "http", "anon", "val", "signal"],
  mediumDict: ["length","eventtype", "filetype", "newserver", "encrypt", "sizeof", "download", "connect", "hexagon", "getfile", "listconfig", "accountname", "responder", "setport", "filedir", "generate", "thread", "getlog", "newhost", "package", "writefile", "username", "userport", "response", "urlcheck", "setnewid", "decrypt", "newline", "password", "setping", "vector", "mysql", "setstats", "number", "getpass", "decryptfile", "gridheight", "account", "loadbytes", "protocol", "export", "findpackage", "getping", "getid", "datatype", "module", "process", "proxy", "serverproxy", "channel", "syscall", "hostserver", "getinfo", "config", "getkey", "encryptfile", "constructor", "server", "gridwidth", "command", "fillgrid", "threat", "userid", "disconnect", "setcookie", "encode"],
  hardDict: ["checkhttptype","systemgridtype", "getxmlprotocol", "loadloggedpassword", "joinnetworkclient", "loadregisterlist", "encodenewfolder", "destroybatch", "tempdatapass", "disconnectchannel", "getfirewallchannel", "encryptunpackedbatch", "sendintelpass", "exportconfigpackage", "wordcounter", "bufferpingset", "decryptdatabatch", "disconnectserver", "createnewpackage", "create2axisvector", "dodecahedron", "emitconfiglist", "createnewsocket", "rootcookieset", "removenewcookie", "httpbuffersize", "create3axisvector", "systemportkey", "includedirectory", "uploaduserstats", "removeoldcookie", "patcheventlog", "getdatapassword", "ghostfilesystem", "changepassword", "blockthreat", "channelsetpackage", "loadaltevent", "generatecodepack", "getpartoffile", "eventlistdir", "hostnewserver", "unpacktmpfile", "batchallfiles", "mergesocket", "getmysqldomain", "setnewproxy", "deleteallids", "createfilethread", "statusofprocess", "respondertimeout", "sizeofhexagon", "fileexpresslog", "changeusername", "callmodule"],
  timeBetweenType: 1000,
  autoAttack: true,
  targetPlayerId: 0,
  
};
userVars = {
  
};
function startTyping()
{
  if(document.getElementById(config.toolTypeName).children[0] != null)
  {
    var image = document.getElementById(config.toolTypeName).children[0];
    var word = "";
    var number = image.src.split("/").pop();
    if(image.src.includes("/e", 0))
    {
        word = easyDict[number];
    }
    else if(image.src.includes("/m", 0))
    {
        word = mediumDict[number];
    }
    else if(image.src.includes("/h", 0))
    {
        word = hardDict[number];
    }
    else
    {      
      console.log("Input is over.");
      return;
    }
    console.log("word("+ word +") url " + image.src);
    var inputArea = document.getElementById(config.areaToTypeIn);
    SendInput();
    inputArea.value = word;
    setTimeout(function() {SendInput()}, 500);
  }
  else
  {
    console.log("no words")
  }
}
function SendInput()
{
      var event = new KeyboardEvent("keypress", {
      view: window,
      keyCode: 13,
      bubbles: true,
      cancelable: true
    });

document.querySelector("#tool-type-word").dispatchEvent(event);
}
function setOnLoadEvent()
{
    var element = document.getElementById(config.toolTypeName).children[0];
    var Changeconfig = {attributes: true, subtree: true}
    var x = new MutationObserver(function(e) {
      setTimeout(function() {startTyping()}, config.timeBetweenType);
    })config.
    x.observe(element, Changeconfig);
}
function IsTypeWindowActive()
{
  return document.getElementById(config.typeWindowName).style.display != "none";
}
  
function startBot()
{
  config.activeBot = true;
}
function stopBot()
{
  config.activeBot = false;
}

setOnLoadEvent();
